"""
Food Routes for Wedding Food Menu System
Path: server/routes/food.py
"""
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
import json

from server.models.food import FoodMenu, Food

from ..db import get_db
from ..schemas.food_type import (

    FoodTypeOption,
    VisitorOption,
    MenuResponse,
    CreateFoodMenuRequest,
    FoodMenuListResponse
)

router = APIRouter(prefix="/food", tags=["Food Management"])


@router.get("/food-types", response_model=List[FoodTypeOption])
def get_food_types():
    """Get available food types for dropdown selection"""
    return [
        FoodTypeOption(value="Traditional", label="Traditional Algerian Food"),
        FoodTypeOption(value="Modern", label="Modern International Food"),
        FoodTypeOption(value="Mixed", label="Mixed Traditional & Modern")
    ]


@router.get("/visitor-options", response_model=List[VisitorOption])
def get_visitor_options():
    """Get available visitor count options for dropdown selection"""
    return [
        VisitorOption(value=100, label="100 Visitors"),
        VisitorOption(value=150, label="150 Visitors"),
        VisitorOption(value=200, label="200 Visitors"),
        VisitorOption(value=250, label="250 Visitors"),
        VisitorOption(value=300, label="300 Visitors"),
        VisitorOption(value=400, label="400 Visitors"),
        VisitorOption(value=500, label="500 Visitors")
    ]


@router.get("/menu/{food_type}/{visitors}/{clan_id}", response_model=MenuResponse)
def get_menu(food_type: str, visitors: int, clan_id: int, db: Session = Depends(get_db)):
    """
    Get menu for specific food type and visitor count
    This is the main endpoint that grooms will use
    """

    # Validate food type
    valid_food_types = ["Traditional", "Modern", "Mixed"]
    if food_type not in valid_food_types:
        raise HTTPException(
            status_code=400,
            detail=f"Invalid food type. Must be one of: {', '.join(valid_food_types)}"
        )

    # Find the menu in database
    menu = db.query(FoodMenu).filter(
        FoodMenu.food_type == food_type,
        FoodMenu.number_of_visitors == visitors,
        FoodMenu.clan_id == clan_id
    ).first()

    if not menu:
        raise HTTPException(
            status_code=404,
            detail=f"No menu found for {food_type} food type with {visitors} visitors for clan {clan_id}"
        )

    # Parse the menu details from JSON string
    try:
        menu_items = json.loads(menu.menu_details)
    except json.JSONDecodeError:
        raise HTTPException(
            status_code=500,
            detail="Error parsing menu data from database"
        )

    return MenuResponse(
        food_type=food_type,
        number_of_visitors=visitors,
        menu_items=menu_items
    )


@router.get("/menus/{clan_id}", response_model=List[FoodMenuListResponse])
def get_clan_menus(clan_id: int, db: Session = Depends(get_db)):
    """Get all available menus for a specific clan"""
    menus = db.query(FoodMenu).filter(FoodMenu.clan_id == clan_id).all()
    return menus


# Admin endpoints for managing menus
@router.post("/menu", response_model=dict)
def create_food_menu(
    request: CreateFoodMenuRequest,
    db: Session = Depends(get_db)
):
    """Create a new food menu (Admin use)"""

    # Check if menu already exists for this combination
    existing_menu = db.query(FoodMenu).filter(
        FoodMenu.food_type == request.food_type,
        FoodMenu.number_of_visitors == request.number_of_visitors,
        FoodMenu.clan_id == request.clan_id
    ).first()

    if existing_menu:
        raise HTTPException(
            status_code=400,
            detail=f"Menu already exists for {request.food_type} food with {request.number_of_visitors} visitors"
        )

    # Create new menu
    menu = FoodMenu(
        food_type=request.food_type,
        number_of_visitors=request.number_of_visitors,
        menu_details=json.dumps(request.menu_items),
        clan_id=request.clan_id
    )

    db.add(menu)
    db.commit()
    db.refresh(menu)

    return {
        "message": "Food menu created successfully",
        "menu_id": menu.id,
        "food_type": menu.food_type,
        "visitors": menu.number_of_visitors
    }


@router.put("/menu/{menu_id}", response_model=dict)
def update_food_menu(
    menu_id: int,
    menu_items: List[str],
    db: Session = Depends(get_db)
):
    """Update an existing food menu (Admin use)"""

    menu = db.query(FoodMenu).filter(FoodMenu.id == menu_id).first()
    if not menu:
        raise HTTPException(status_code=404, detail="Menu not found")

    # Update menu items
    menu.menu_details = json.dumps(menu_items)
    db.commit()

    return {
        "message": "Food menu updated successfully",
        "menu_id": menu.id
    }


@router.delete("/menu/{menu_id}", response_model=dict)
def delete_food_menu(menu_id: int, db: Session = Depends(get_db)):
    """Delete a food menu (Admin use)"""

    menu = db.query(FoodMenu).filter(FoodMenu.id == menu_id).first()
    if not menu:
        raise HTTPException(status_code=404, detail="Menu not found")

    db.delete(menu)
    db.commit()

    return {"message": "Food menu deleted successfully"}


